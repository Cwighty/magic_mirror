0{"DateTime":"2023-12-19T23:21:29.0912304Z","Version":0,"CopilotSessionId":{"Guid":"cf5b6ecc-c932-49e8-ae21-5e039435508a","ClientId":{"Id":"Microsoft.VisualStudio.Conversations.Chat.HelpWindow"}},"Request":{"Prompt":"refactor this to remove magic strings","Context":{"VisibleDocuments":[],"PreSelectedSkill":null,"CorrelationId":{"Guid":"00000000-0000-0000-0000-000000000000"}}},"Response":{"Content":"\u0060\u0060\u0060C#\n// Without the original code, I can\u0027t provide a specific refactoring. However, here\u0027s a general approach:\n\n// Define constants for your magic strings at the top of your class or method\nconst string MagicString1 = \u0022magic string 1\u0022;\nconst string MagicString2 = \u0022magic string 2\u0022;\n\n// Then replace the magic strings in your code with the constants\nvar result = SomeMethod(MagicString1);\nAnotherMethod(MagicString2);\n\u0060\u0060\u0060","Type":1,"Status":1,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null,"ThreadName":null}
0{"DateTime":"2023-12-19T23:21:29.0912304Z","Version":0,"CopilotSessionId":{"Guid":"cf5b6ecc-c932-49e8-ae21-5e039435508a","ClientId":{"Id":"Microsoft.VisualStudio.Conversations.Chat.HelpWindow"}},"Request":{"Prompt":"refactor this code","Context":{"VisibleDocuments":[],"PreSelectedSkill":null,"CorrelationId":{"Guid":"00000000-0000-0000-0000-000000000000"}}},"Response":{"Content":"\u0060\u0060\u0060C#\nusing NativeWebSocket;\nusing UnityEngine;\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine.SceneManagement;\nusing System.Diagnostics;\nusing Debug = UnityEngine.Debug;\nusing System.Collections;\n\npublic class WebSocketUnityClient : MonoBehaviour\n{\n    WebSocket websocket;\n    private AudioPlayer audioPlayer;\n\n    public AudioClip windClip;\n    public AudioSource windAudioSource;\n\n    public ParticleSystem fireParticles;\n    public AudioSource fireAudioSource;\n    public AudioClip fireClip;\n\n    public float windFadeOutDuration = 2.0f;  // Duration in seconds for the audio to fade out\n    private bool windIsFadingOut = false;\n\n    private const string MessageType = \u0022message\u0022;\n    private const string AudioType = \u0022audio\u0022;\n    private const string FaceDataType = \u0022face_data\u0022;\n    private const string ListeningData = \u0022listening\u0022;\n    private const string TranscribingData = \u0022transcribing\u0022;\n    private const string ProcessingData = \u0022processing\u0022;\n    private const string SceneName = \u0022Nothing\u0022;\n    private const string LipSyncContext = \u0022LipSyncContext\u0022;\n    private const string AppearScene = \u0022Appear\u0022;\n\n    // Start is called before the first frame update\n    async void Start()\n    {\n        DontDestroyOnLoad(gameObject);\n        SceneManager.sceneLoaded \u002B= OnSceneLoaded;\n\n        websocket = new WebSocket(\u0022ws://localhost:8765\u0022);\n        websocket.OnOpen \u002B= () =\u003E\n        {\n            Debug.Log(\u0022Connection open!\u0022);\n        };\n\n        websocket.OnError \u002B= (e) =\u003E\n        {\n            Debug.Log(\u0022Error! \u0022 \u002B e);\n        };\n\n        websocket.OnClose \u002B= (e) =\u003E\n        {\n            Debug.Log(\u0022Connection closed!\u0022);\n        };\n\n        websocket.OnMessage \u002B= (bytes) =\u003E\n        {\n            // Try to convert message bytes to UTF-8 string\n            try\n            {\n                var message = System.Text.Encoding.UTF8.GetString(bytes);\n                var status = JsonUtility.FromJson\u003CStatusMessage\u003E(message);\n\n                HandleMessage(status);\n            }\n            catch (Exception e)\n            {\n                Debug.Log(\u0022Invalid message received! \u0022 \u002B e.Message);\n            }\n        };\n\n        // waiting for messages\n        await websocket.Connect();\n    }\n\n    private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)\n    {\n        if (windAudioSource.isPlaying \u0026\u0026 !windIsFadingOut)\n        {\n            StartCoroutine(FadeOutAudio());\n        }\n    }\n\n    void Update()\n    {\n#if !UNITY_WEBGL || UNITY_EDITOR\n        websocket.DispatchMessageQueue();\n#endif\n    }\n\n    void HandleMessage(StatusMessage message)\n    {\n        if (message.type == MessageType)\n        {\n            switch (message.data)\n            {\n                case ListeningData:\n                    Debug.Log(\u0022Listening...\u0022);\n                    HandleListening();\n                    break;\n                case TranscribingData:\n                    HandleTranscribing();\n                    break;\n                case ProcessingData:\n                    Debug.Log(\u0022Processing...\u0022);\n                    break;\n                default:\n                    Debug.LogWarning(\u0022Unknown message\u0022);\n                    break;\n            }\n        }\n        else if (message.type == AudioType)\n        {\n            StartCoroutine(WaitAndPlayTtsResponse(message.data));\n        }\n        else if (message.type == FaceDataType)\n        {\n            HandleFaceData(message.data);\n        }\n        else\n        {\n            Debug.LogWarning(\u0022Unknown message type!\u0022);\n        }\n\n    }\n\n    IEnumerator WaitAndPlayTtsResponse(string audioData)\n    {\n        yield return new WaitForSeconds(3);  // Wait for 1 second\n\n        GameObject audioPlayerObject = GameObject.Find(LipSyncContext);\n        if (audioPlayerObject != null)\n        {\n            audioPlayer = audioPlayerObject.GetComponent\u003CAudioPlayer\u003E();\n            audioPlayer.PlayAudioFromBase64(audioData);\n        }\n        else\n        {\n            Debug.LogError(\u0022AudioPlayer GameObject not found.\u0022);\n        }\n    }\n\n    void HandleListening()\n    {\n        if (SceneManager.GetActiveScene().name == SceneName)\n        {\n            // Play the audio clip\n            if (!windAudioSource.isPlaying) // Check to ensure it doesn\u0027t restart if already playing\n            {\n                windAudioSource.clip = windClip;\n                windAudioSource.Play();\n                DontDestroyOnLoad(windAudioSource);\n            }\n        }\n    }\n    \n    void HandleTranscribing()\n    {\n        if (SceneManager.GetActiveScene().name == SceneName)\n        {\n            if (!fireAudioSource.isPlaying)            {\n                fireAudioSource.clip = fireClip;\n                fireAudioSource.Play();\n                DontDestroyOnLoad(fireAudioSource);\n            }\n            if (!fireParticles.isPlaying)\n            {\n                fireParticles.Play();\n            }\n\n            StartCoroutine(WaitAndChangeScene());\n        }\n        else\n        {\n            GameObject audioPlayerObject = GameObject.Find(LipSyncContext);\n            if (audioPlayerObject != null)\n            {\n                audioPlayer = audioPlayerObject.GetComponent\u003CAudioPlayer\u003E();\n                audioPlayer.PlayRandomQuickResponse();\n            }\n        }\n    }\n\n    void HandleFaceData(string jsonData)\n    {\n        FaceData faceData = JsonUtility.FromJson\u003CFaceData\u003E(jsonData);\n    // Now use faceData.angle and faceData.emotion to control the mask and trigger animations\n    // Example: RotateMask(faceData.angle);\n    // Example: TriggerEmotionAnimation(faceData.emotion);\n    }\n\n    IEnumerator WaitAndChangeScene()\n    {\n        yield return new WaitForSeconds(3);  // Wait for 3 seconds\n\n        SceneManager.LoadScene(AppearScene);\n    }\n\n    IEnumerator FadeOutAudio()\n    {\n        windIsFadingOut = true;\n        float startVolume = windAudioSource.volume;\n\n        while (windAudioSource.volume \u003E 0)\n        {\n            windAudioSource.volume -= startVolume * Time.deltaTime / windFadeOutDuration;\n            yield return null;\n        }\n\n        windAudioSource.Stop();\n        windAudioSource.volume = startVolume;\n\n        Destroy(windAudioSource);\n    }\n}\n\n[Serializable]\npublic class StatusMessage\n{\n    public string type;\n    public string data;\n}\n\n\n[Serializable]\npublic class FaceData\n{\n    public float angle;\n    public string emotion;\n}\n\u0060\u0060\u0060","Type":1,"Status":1,"FollowUpPrompts":null},"SelectedFunctionName":"Modify","LoggedSkillInvocations":null,"ThreadName":null}
